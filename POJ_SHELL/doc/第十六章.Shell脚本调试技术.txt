1.Shell脚本调试概述（1）
  ①Shell脚本调试就是发现引发脚本错误的原因以及在脚本源代码中定位发生错误的行，常用的手段包括分析输出的错误信息，通过在脚本中加入调试语句，输出调试信息来辅助诊断错误，利用调试工具等
  ②Shell解释器缺乏相应的调试机制和调试工具的支持，其输出的错误信息又往往很不明确，因此，Shell脚本调试是一个令程序员头痛的问题。
2.Shell脚本调试概述（2）
  ①Shell脚本的错误（syntax error),脚本无法执行到底
  #例16-1：misskey.sh脚本演示漏写关键字错误
  #!/bin/bash

	set -n
	var=0
	while :
	do
	 if [ $var -gt 3] 
	 then 
	   break
	 fi
	let "var=var+1"
	done
3.Shell脚本调试概述（3）
  ①Shell脚本能够执行完毕，但是并不是按照我们所期望的方式运行，即存在逻辑错误
    #例16-2：runsec.sh脚本演示逻辑错误
	#!/bin/bash
	count=1          #用于记录进入while循环的次数
	MAX=5
	
	while [ "$SECONDS" -le "$MAX" ]
	do
		echo "This is the $count time to sleep."
		count=$count+1
		sleep 2
	done
	
	echo "The running time of this script is $SECONDS"
4.使用trap命令（1）
  ①trap是Linux的内建命令， 它用于捕捉信号，trap命令可以指定收到某种信号时所执行的命令
    trap command sig1 sig2 ...sigN
  ②Shell脚本在执行时，会产生三个所谓的"伪信号"，（之所以称之为“伪信号”时因为这三个信号是由Shell产生的，而其他的信号是由操作系统产生的）
  ③利用trap命令捕获这三个“伪信号”并输出相关信息是Shell脚本调试的一种重要技巧
    信号名称            产生条件
	EXIT                从函数中退出，或整个脚本执行完毕
	ERR                 当一条命令返回非零状态码，即命令执行不成功
	DEBUG               脚本中的每一条命令执行之前
5.使用trap命令（2）
  ①在调试过程中，为了跟踪某些变量的值，我们常常需要在Shell脚本的许多地方插入相同的echo语句来打印相关变量的值，这种做法显得繁琐而笨拙。而利用trap命令捕获DEBUG信号，我们只需要一条trap语句就可以完成对相关变量的全程跟踪
   演示例16-4的trapdebug.sh
   [heguang@localhost ~]$ cat trapdebug.sh
	#!/bin/bash

	trap 'echo "before execute line:$LINENO, a=$a,b=$b,c=$c"' DEBUG
	a=0
	b=2
	c=100
	while :                          #冒号相当于TRUE
	do
		if ((a >= 10))                 #i大于等于10时，跳出while循环
	 then
			break
		fi

	let "a=a+2"
	let "b=b*2"
	let "c=c-10"
	done

	[heguang@localhost ~]$ chmod u+x trapdebug.sh
	[heguang@localhost ~]$ ./trapdebug.sh
	before execute line:4, a=,b=,c=
	before execute line:5, a=0,b=,c=
	before execute line:6, a=0,b=2,c=
	before execute line:7, a=0,b=2,c=100
	before execute line:9, a=0,b=2,c=100
	before execute line:14, a=0,b=2,c=100
	before execute line:15, a=2,b=2,c=100
	before execute line:16, a=2,b=4,c=100
	before execute line:7, a=2,b=4,c=90
	before execute line:9, a=2,b=4,c=90
	before execute line:14, a=2,b=4,c=90
	before execute line:15, a=4,b=4,c=90
	before execute line:16, a=4,b=8,c=90
	before execute line:7, a=4,b=8,c=80
	before execute line:9, a=4,b=8,c=80
	before execute line:14, a=4,b=8,c=80
	before execute line:15, a=6,b=8,c=80
	before execute line:16, a=6,b=16,c=80
	before execute line:7, a=6,b=16,c=70
	before execute line:9, a=6,b=16,c=70
	before execute line:14, a=6,b=16,c=70
	before execute line:15, a=8,b=16,c=70
	before execute line:16, a=8,b=32,c=70
	before execute line:7, a=8,b=32,c=60
	before execute line:9, a=8,b=32,c=60
	before execute line:14, a=8,b=32,c=60
	before execute line:15, a=10,b=32,c=60
	before execute line:16, a=10,b=64,c=60
	before execute line:7, a=10,b=64,c=50
	before execute line:9, a=10,b=64,c=50
	before execute line:11, a=10,b=64,c=50
  ②从函数退出或脚本结束时，Shell发出EXIT信号；当函数或脚本返回非0值时，Shell发出ERR信号
    例1：
	[heguang@localhost ~]$ cat trapexit.sh
	#!/bin/bash

	fun1()
	{
	  echo "This is an correct function"
	  var=2010
	  return 0
	}
	trap 'echo "Line:$LINENO,var=$var"' EXIT
	fun1
	#var=2009
	echo
	echo
	exit 0

	[heguang@localhost ~]$ chmod u+x trapexit.sh
	[heguang@localhost ~]$ ./trapexit.sh
	This is an correct function


	Line:1,var=2010

	例2：
	[heguang@localhost ~]$ cat traperr.sh
	#!/bin/bash

	fun2()
	{
	  echo "This is an error function"
	  var=2010
	  return 1
	}
	trap 'echo "Line:$LINENO,var=$var"' ERR
	fun2
	ipconfig
	[heguang@localhost ~]$ chmod u+x traperr.sh
	[heguang@localhost ~]$ ./traperr.sh
	This is an error function
	Line:7,var=2010
	./traperr.sh:行11: ipconfig: 未找到命令
	Line:11,var=2010
6.使用tee命令（1）
  ①tee命令产生的数据流向很像英文字符T，将一个输出分为两个支流，一个到标准输出，另一个到某输出文件
  ②tee命令的这种特性可以用到Shell脚本的管道及输入输出重定向的调试上，当我们发现由管道连接起来的一系列命令的执行结果并非如预期的那样，就需要逐步检查各条命令的执行结果来定位错误，但因为使用了管道，这些中间结果并不会显示在屏幕上，这给调试带来了困难。
    标准输出和output文件（who命令执行后输出）
7.使用tee命令（2）
