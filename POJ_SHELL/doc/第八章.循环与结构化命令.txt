1.列表for循环
  ①列表for循环语句用于将一组命令执行已知的次数，下面给出了for循环语句的基本格式：
    for variable in {list}
    do
        command
        command
        ...
     done
   a.其中do和done之间的命令称为循环体，执行次数和list列表中常数或字符串的个数相同。
   b.当执行for循环时，首先将in后的list列表的第一个常数或字符串赋值给循环变量，然后执行循环体；接着将list列表中的第二个常数或字符串赋值给循环变量，再次执行循环体，这个过程将一直持续到list列表中无其他的常数或字符串，然后执行done命令后的命令序列。
例1：
	[heguang@promote ~]$ cat for_exam1.sh
	#for_exam1.sh
	#!/bin/bash

	for variable1 in 1 2 3 4 5
	do
	     echo "Hello, Welcome $variable1 times "
	done
	[heguang@promote ~]$ chmod a+x for_exam1.sh
	[heguang@promote ~]$ ./for_exam1.sh
	Hello, Welcome 1 times
	Hello, Welcome 2 times
	Hello, Welcome 3 times
	Hello, Welcome 4 times
	Hello, Welcome 5 times
例2：
	[heguang@promote ~]$ cat for_exam6.sh
	#for_exam6.sh
	#!/bin/bash

	for file in $( ls )
	do
	    echo "file:$file"
	done
	[heguang@promote ~]$ chmod a+x for_exam6.sh
	[heguang@promote ~]$ ./for_exam6.sh
	file:AREACODE.db
	file:argv.awk
	file:CARGO2.db
	file:CARGO.db
	file:case_exam2.sh
	file:child.sh
	file:constant_exam1.sh
	file:count_word.sh
	file:db.all.gz
	file:DEBUG
	file:double
	file:ecsape
	file:escape.sh
	file:exit_exam1.txt
	file:father.sh
	file:file2.txt
	file:file_exam2
	file:file.txt
	file:for_exam1.sh
	file:for_exam6.sh
	file:ifelifelse_exam1.sh
	file:ifelse_exam2.sh
	file:ifelse_exam4.sh
	file:if_exam2.sh
	file:if_file1
	file:increment_and_decrease_exam1.sh
	file:input.txt
	file:insert.sed
	file:integer
	file:modify.sed
	file:null-undeclear
	file:otherfile
	file:output.txt
	file:position.sh
	file:PRICE.db
	file:PRO.dbaa
	file:PRO.dbab
	file:PRO.dbac
	file:REPEAT
	file:scr2.awk
	file:shell-program
	file:simpleC
	file:simpleC.c
	file:sturecord
	file:sturecord1
	file:TEACHER1.db
	file:TEACHER.db
	file:TEACHER_HOBBY.db
	file:testvi
	file:tsk01
	file:unll-undeclear
	file:unll-undelclear
	file:vgauthsvclog.txt
	file:whogged.sh
	file:whologged2.sh
	file:whologged.sh
	file:WORDLIST
	file:XXaa
	file:XXab
	file:XXac
	file:YYaa
	file:YYab
	file:YYac
	file:公共
	file:模板
	file:视频
	file:图片
	file:文档
	file:下载
	file:音乐
	file:桌面
2.不带列表for循环
  ①不带列表的for循环执行时由用户指定参数和参数的个数，下面给出了不带列表的for循环的基本格式：
    for variable
    do
        command
        command
        ...
     done
    a.其中do和done之间的命令称为循环体，Shell会自动的将命令行键入的所有参数依次组织成列表，每次将一个命令行键入的参数显示给用户，直至所有的命令行中的参数都显示给用户。
例1：
	[heguang@promote ~]$ cat for_exam9.sh
	#for_exam9.sh
	#!/bin/bash

	echo "number of arguments is $#"

	echo "what you input is: "

	for argument
	do
	     echo "$argument"
	done
	[heguang@promote ~]$ chmod a+x for_exam9.sh
	[heguang@promote ~]$ ./for_exam9.sh 1 2 3
	number of arguments is 3
	what you input is:
	1
	2
	3
	[heguang@promote ~]$ ./for_exam9.sh Hello World !
	number of arguments is 3
	what you input is:
	Hello
	World
	!
3.类C风格的for循环（1）
  ①类C风格的for循环也可被称为计次循环，一般用于循环次数已知的情况，下面给出了类C风格的for循环的语法格式：
	for((expr1;expr2;expr3))
	do
		command
    		command
		...
 	done
4.类C风格的for循环（2）
  ①对类C风格的for循环结构的解释：
    a.其中表达式expr1为循环变量赋初值的语句。
    b.表达式expr2决定是否进行循环的表达式，当判断expr2退出状态为0执行do和done之间的循环体，当退出状态为非0时将退出for循环执行done后的命令。
    c.表达式expr3用于改变循环变量的语句。
    d.类C风格的for循环结构中，循环体也是一个块语句，要么是单条命令，要么是多条命令，但必须包裹在do和done之间。
例1：
	[heguang@promote ~]$ cat for_exam10.sh
	#for_exam10.sh
	#!/bin/bash

	for(( integer = 1; integer <= 5; integer++ ))
	do
	        echo "$integer"
	done
	[heguang@promote ~]$ chmod a+x for_exam10.sh
	[heguang@promote ~]$ ./for_exam10.sh
	1
	2
	3
	4
	5
例2：
	[heguang@promote ~]$ cat for_exam11.sh
	#for_exam11.sh
	#!/bin/bash

	sum=0

	for(( i = 1; i <= 100; i = i + 2 ))
	do
	        let "sum += i"
	done

	echo "sum=$sum"
	[heguang@promote ~]$ chmod a+x for_exam11.sh
	[heguang@promote ~]$ ./for_exam11.sh
	sum=2500
5.while循环
  ①while循环语句也称前测试循环语句，它的循环重复执行次数，是利用一个条件来控制是否继续重复执行这个语句。while语句与for循环语句相比，无论是语法还是执行的流程，都比较简单易懂。while循环格式如下：
    while expression
    do
	command
        command
        ...
    done
    a.while循环语句之所以命名为前测试循环，是因为它要先判断此循环的条件是否成立，然后才作重复执行的操作。也就是说，while循环语句执行过程是：先判断expression的退出状态，如果退出状态为0，则执行循环体，并且在执行完循环体后，进行下一次循环，否则退出循环执行done后的命令。
    b.为了避免死循环，必须保证在循环体重包含循环出口条件，即存在expression的退出状态为非0的情况。
6.计数器控制的while循环
  ①假定该种情形是在已经准确知道要输入的数据或字符串的数目，在这种情况下可采用计数器控制的while循环结构来处理。这种情形下while循环的格式如下所示：
    counter = 1
    while expression
    do
	command
        ...
        let command to operate counter
        ...
    done
例1：
	[heguang@promote ~]$ cat while_exam2.sh
	#while_exam2.sh
	#!/bin/bash

	sum=0

	i=1
	while(( i <= 100 ))
	do
	        let "sum+=i"
	        let "i += 2"
	done

	echo "sum=$sum"
	[heguang@promote ~]$ chmod a+x while_exam2.sh
	[heguang@promote ~]$ ./while_exam2.sh
	sum=2500
7.结束标记控制的while循环
  ①在Linux Shell编程中很多时候不知道读入数据的个数，但是可以设置一个特殊的数据值来结束while循环，该特殊数据值称为结束标记，其通过提示用户输入特殊字符或数字来操作。当用户输入该标记后结束while循环，执行done后的命令。在该情形下，while循环的形式如下所示：
    read variable
    while [[ "$variable" ！= sentinel ]]
    do
	read variable
    done
例1：
	[heguang@promote ~]$ cat while_exam3.sh
	#while_exam3.sh
	#!/bin/bash

	echo "Please input the num(1-10) "
	read num

	while [[ "$num" != 4 ]]
	do
	    if [ "$num" -lt 4 ]
	    then
	        echo "Too small. Try again!"
	        read num
	     elif [ "$num" -gt 4 ]
	     then
	        echo "Too high. Try again!"
	        read num
	     else
	        exit 0
	     fi
	done

	echo "Congratulation. you ara right!"

	[heguang@promote ~]$ chmod a+x while_exam3.sh
	[heguang@promote ~]$ ./while_exam3.sh
	Please input the num(1-10)
	7
	Too high. Try again!
	3
	Too small. Try again!
	4
	Congratulation. you ara right!
8.标志控制的while循环
  ①标准控制的while循环使用用户输入的标志的值来控制循环的结束，这样避免了用户不知道循环结束标记的麻烦。在该情形下，while循环的形式如下所示：
    signal=0
    while ((siginal != 1))
    do
       ...
       if expression
       then
          signal=1
       fi
       ...
     done
例：
	[heguang@localhost ~]$ cat while_exam6.sh
	#while_exma6.sh
	#!/bin/bash

	echo "Please input the num "
	read num

	sum=0
	i=1

	signal=0

	while [[ "$siginal" != 1 ]]
	do
			if [ "$i" -eq "$num" ]
			then
			   let "siginal=1"
			   let "sum+=i"
			   echo "1+2+...+$num=$sum"
			else
			   let "sum=sum+i"
			   let "i++"
			fi
	done
	[heguang@localhost ~]$ chmod a+x while_exam6.sh
	[heguang@localhost ~]$ ./while_exam6.sh
	Please input the num
	10
	1+2+...+10=55
9.命令行控制的while循环
  ①有时需要使用命令行来指定输出参数和参数个数，这时用其他的三种形式的while循环是无法实现的，所以需要使用命令行控制的while循环。该形式下，while循环通常与shift结合起来使用，其中shift命令使位置变量下移一位（即$2代替$1,$3代替$2),并且使$#变量递减，当最后一个参数也显示给用户后，$#就等于0，同时$*也等于空，下面是该情形下，while循环的形式为：
    while [[ "$*" != "" ]]
	do
		echo "$1"
		shift
	done
	例：
	[heguang@localhost ~]$ cat while_exma7.sh
	#while_exma7.sh
	#!/bin/bash

	echo "number of arguments is $#"

	echo "What you input is: "

	while [[ "$*" != "" ]]
	do
			echo echo "$1"
			shift
	done

	[heguang@localhost ~]$ chmod a+x while_exam7.sh
	chmod: 无法访问"while_exam7.sh": 没有那个文件或目录
	[heguang@localhost ~]$ chmod a+x while_exma7.sh
	[heguang@localhost ~]$ ./while_exma7.sh 1 2 3
	number of arguments is 3
	What you input is:
	echo 1
	echo 2
	echo 3
10.util循环
  ①在执行while循环时，只要是expression的退出状态为0将一直执行循环体。until命令和while命令类似，但区别是uitil循环中expression的退出状态不为0将循环体一直执行下去，直到退出状态为0，下面给出了until循环的结构：
    until expression
	do
	   command
	   command
	   ...
	done
	例：
	[heguang@localhost ~]$ cat until_exam1.sh
	#until_exam1.sh
	#!/bin/bash

	i=0

	until [[ "$i" -gt 5 ]]
	do
		 let "square=i*i"
		 echo "$i * $i = $square"
			 let "i++"
	done
	[heguang@localhost ~]$ chmod a+x until_exam1.sh
	[heguang@localhost ~]$ ./until_exam1.sh
	0 * 0 = 0
	1 * 1 = 1
	2 * 2 = 4
	3 * 3 = 9
	4 * 4 = 16
	5 * 5 = 25
11.嵌套循环
  ①一个循环内又包含另一个完整的循环结构，称为循环的嵌套。在外部循环的每次执行过程中都会触发内部循环，直至内部完成一次循环，才接着执行下一次的外部循环。for循环，while循环和until循环可以相互嵌套。
  例1：
	#nested_loop_exam1.sh
	#!/bin/bash

	for  (( i = 1; i <=9; i++ ))
	do
			for (( j = 1; j <= i; j++ ))
			do
					let "temp = i * j"
					echo -n "$i*$j=$temp "
			done
			echo ""
	done
	[heguang@localhost ~]$ chmod a+x nested_loop_exam1.sh
	[heguang@localhost ~]$ ./nested_loop_exam1.sh
	1*1=1
	2*1=2 2*2=4
	3*1=3 3*2=6 3*3=9
	4*1=4 4*2=8 4*3=12 4*4=16
	5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
	6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
	7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
	8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
	9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
	例2：
	[heguang@localhost ~]$ cat nested_loop_exam4.sh
	#nested_loop_exam4.sh
	#!/bin/bash

	for (( i = 1; i <= 9; i++ ))
	do
			j=9
			while (( j > i ))
			do
					echo -n " "
					let "j--"
			done
			k=1
			while (( k <= i ))
			do
					echo -n "*"
					let "k++"
			done
			echo ""
	done
	[heguang@localhost ~]$ chmod a+x nested_loop_exam4.sh
	[heguang@localhost ~]$ ./nested_loop_exam4.sh
			*
		   **
		  ***
		 ****
		*****
	   ******
	  *******
	 ********
	*********
12.break循环控制符
  ①break语句可以应用在for，while和until循环语句中，用于强行退出循环，也就是忽略循环体中任何其他语句和循环条件的限制。

	例1：
	[heguang@localhost ~]$ cat break_exam2.sh
	#break_exam2.sh
	#!/bin/bash

	for ((  i = 1; i <= 9; i++ ))
	do
			for (( j = 1; j <= i; j++ ))
			do
					let "temp=i*j"
					if [ "$temp" -eq 7 ]
					then
							break
					fi
					echo -n "$i*$j=$temp "
			done
			echo ""
	done

	[heguang@localhost ~]$ chmod a+x break_exam2.sh
	[heguang@localhost ~]$ ./break_exam2.sh
	1*1=1
	2*1=2 2*2=4
	3*1=3 3*2=6 3*3=9
	4*1=4 4*2=8 4*3=12 4*4=16
	5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
	6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36

	8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
	9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
	例2：
	[heguang@localhost ~]$ cat break_exam3.sh
	#break_exam3.sh
	#!/bin/bash

	for ((  i = 1; i <= 9; i++ ))
	do
			for (( j = 1; j <= i; j++ ))
			do
					let "temp=i*j"
					echo -n "$i*$j=$temp "
			done
				if [ "$i" -eq 6 ]
			then
				break
			fi
			echo ""
	done

	[heguang@localhost ~]$ chmod a+x break_exam3.sh
	[heguang@localhost ~]$ ./break_exam3.sh
	1*1=1
	2*1=2 2*2=4
	3*1=3 3*2=6 3*3=9
	4*1=4 4*2=8 4*3=12 4*4=16
	5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
	6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 [heguang@localhost ~]$
13.continue循环控制符
  ①continue循环控制符应用在for，while和until语句中，用于让脚本跳过其后面的语句，执行下一次循环。
  例1：
	[heguang@localhost ~]$ cat continue_exam2.sh
	#continue_exam2.sh
	#!/bin/bash

	for ((  i = 1; i <= 9; i++ ))
	do
					for (( j = 1; j <= i; j++ ))
					do
									let "temp=i*j"
									if [ "$temp" -eq 7 ]
									then
													continue
									fi
									echo -n "$i*$j=$temp "
					done
					echo ""
	done
	[heguang@localhost ~]$ chmod a+x continue_exam2.sh
	[heguang@localhost ~]$ ./continue_exam2.sh
	1*1=1
	2*1=2 2*2=4
	3*1=3 3*2=6 3*3=9
	4*1=4 4*2=8 4*3=12 4*4=16
	5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
	6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
	7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
	8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
	9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
    例2：
	[heguang@localhost ~]$ cat continue_exam3.sh
	#continue_exam3.sh
	#!/bin/bash

	for ((  i = 1; i <= 9; i++ ))
	do
					if [ "$i" -eq 7 ]
					then
							continue
					fi
					for (( j = 1; j <= i; j++ ))
					do
									let "temp=i*j"
									echo -n "$i*$j=$temp "
					done

					echo ""
	done
	[heguang@localhost ~]$ chmod a+x continue_exam3.sh
	[heguang@localhost ~]$ ./continue_exam3.sh
	1*1=1
	2*1=2 2*2=4
	3*1=3 3*2=6 3*3=9
	4*1=4 4*2=8 4*3=12 4*4=16
	5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
	6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
	8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
	9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
14.select结构
   ①Select是bash的扩展结构，用于交互式菜单显示，用于从一组不同的值中进行选择，功能有点类似于case结构，但其交互性要比case好的多，其基本结构为：
     selec variable in {list}
	 do
			command
			...
			break
	done
	例：
	[heguang@localhost ~]$ cat select_exam1.sh
	#select_exam1.sh
	#!/bin/bash

	echo "What is your favourite color? "

	select color in "red" "blue" "green" "white" "black"
	do
			break
	done
	echo "You have selected $color"
	[heguang@localhost ~]$ chmod a+x select_exam1.sh
	[heguang@localhost ~]$ ./select_exam1.sh
	What is your favourite color?
	1) red
	2) blue
	3) green
	4) white
	5) black
	#? 3
	You have selected green


